---
- name: Create the OpenStack tenant networks
  os_network:
    state: present
    cloud: "{{ region_dict.cloud | default(omit) }}"
    shared: false
    provider_network_type: vlan
    name: "{{ network_dict.name }}"
    external: false
    project: "{{ region_dict.project | default(omit) }}"
    validate_certs: "{{ region_dict.validate_certs | default(omit) }}"
  register: network
  tags:
    - cloud
    - os
#
#- set_fact:
#    vlan_id: "{{ network.results[0].network['provider:segmentation_id'] }}"
    
- name: Create the OpenStack tenant subnets
  os_subnet:
    state: present
    cloud: "{{ region_dict.cloud | default(omit) }}"
    project: "{{ region_dict.project | default(omit) }}"
    network_name: "{{ network_dict.name }}"
    name: "{{ network_dict.name }}_subnet"
    cidr: "{{ network_dict.cidr }}"
    dns_nameservers: "{{ network_dict.dns_server_list | default([]) }}"
    validate_certs: "{{ region_dict.validate_certs | default(omit) }}"
  register: subnet
  tags:
    - cloud
    - os

# - debug: var=subnet

- name: Create the OpenStack tenant router
  os_router:
    state: present
    cloud: "{{ region_dict.cloud | default(omit) }}"
    project: "{{ region_dict.project | default(omit) }}"
    name: "{{ network_dict.name }}_router"
    network: "{{ network_dict.ext_network }}"
    validate_certs: "{{ region_dict.validate_certs | default(omit) }}"
    interfaces:
      - "{{ network_dict.name }}_subnet"
  when: (subnet.changed) and (network_dict.ext_network is defined)
  register: router
  ignore_errors: yes

# - debug: var=router